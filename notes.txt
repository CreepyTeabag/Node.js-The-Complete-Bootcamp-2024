---------- 5 ----------
Node.js is a JavaScript runtime built on google's open-source V8 JavaScript engine.
JS runtime is what runs the JS - the browser or a V8 engine.
So with Node.js we can use JS on a web-server and build fast, highly scalable network applications on backend.

Node.js pros:
- Single-threaded, based on event driven, non-blocking I/O model.
- Perfect for building fast and scalable data-intensive apps;
- Companies like NETFLIX, UBER, PayPal, ebay have started using node in production;
- JavaScript across the entire stack: faster and more efficient development;
- NPM: huge library of open-source packages available for everyone for free;
- Very active developer community.

Use Node.js:
- API with database behind it (preferably NoSQL);
- Data streaming (think YouTube);
- Real-time chat application;
- Server-side web application.

Don't use Node.js:
- Applications with heavy server-side processing (CPU-intensive)
      CPU = central processing unit, центральный процессор

---------- 6 ----------
> node
Opens Node REPL (read-eval-print-loop) and we can write our code in the terminal.

> .exit    or     Ctrl + D
Exits Node REPL.

> Ctrl + L
Clears console

> Tab
Shows all the global variables available in Node

> _
Previous result (i.e. 3 * 8 = 24; _ + 6 = 30)

> String. + Tab
Shows all of the methods available on String. We can do that with any global variable

---------- 7 ----------
> node index.js
Executes index.js

Node.js is built on the concept of modules where all kinds of additional functionality is stored in a module. For example, functionality of reading files is inside of FS (File System) module. We use a module by including it into our code like this:
   const fs = require('fs');

---------- 8 ----------
fs.readFileSync('pathToFile', 'characterEncoding')
Reads file synchronously and returns the data

\n
Goes to a new line

fs.writeFileSync('pathToFile', whatToOutput);
Creates a new file and writes to it

---------- 9 ----------
Synchronous code: each statement is processed one after another, line by line. This code is blocking, because a certain operation can only be executed only after the one before ahs finished.

Asynchronous code is non-blocking, so we offload heavy work to be worked on in the background. And then, once that work is done, a callback function that we registered before is called to handle the result. So the main code continues working while the heavy process is running in the background.

Node.js is single-threaded, which means that whenever users are interacting with the application, the code that is run for each user will be executed all in the same thread at the same place in the computer running the application.
This means that if one user blocks the code in a synchronous way, all the other users will have to wait for that execution to finish. So it's our job as developers to avoid this kind of situation.

So basically Node.js is single-threaded, but it sends all the heavy stuff to the background to make single thread work faster. That's how Node.js implements non-blocking I/O (input/output) model. And that's why Node.js is completely designed around callbacks.

But callbacks !== asynchronous code.

---------- 10 ----------
It is very common in Node.js to have error first, data second in arguments in a callback.

---------- 11 ----------
const server = http.createServer((req, res) => {
   res.end('Hello from the server!');
});
Accepts a callback function which will be fired off each time a new request hits our server.

res.end()
Sends back a simple response.

server.listen(port, 'hostname', () => {callbackFn});


When we createServer(), the process doesn't stop running. It waits for requests to come in.
We do the request by simply hitting the url.
When the node is running, we can hit Ctrl + C to exit the process.

---------- 12 ----------
Routing means implementing different actions for different URLs.
res.writeHead() can send status code (the error) and the headers.
Headers is a piece of information about the response that we are sending back.
For example, 'Content-type': 'text/html' lets browser know that we're sending some HTML. We can also send our own headers.
Headers and status code always need to be sent before we send out the response!
Routes that we write in our code and the routes that we write in the URL have nothing oto do with our projects' file system.

---------- 13 ----------
An API is a service from which we can request some data. For example, the data that the user wants to request is data about the products that we are offering in Node farm.
When we specify the path to a file, the './' means the directory form which we are starting Node. But that con be inconvenient, so it's better to do it like this:
   fs.readFile(`${__dirname}/dev-data/data.json`)
Where '__dirnam' is where the file is located.
However, in the require() function './' means the current working directory and not the place we execute the script from.

The code that is outside of callback functions is executed only once, so it can synchronous.

---------- 15 ----------
temp.replace(/{%PRODUCTNAME%}/g, product.productName);
Will replace all of the instances of '{%PRODUCTNAME%}'.

---------- 16 ----------
url.parse(req.url, true)
Returns an object created from query form the URL.

---------- 17 ----------
In Node.js every single file is treated as a module. We can write our functions in different files and import them where we need them.
The module will look something like this:
module.exports = () => {smth}

And we import the function like this:
const fnName = require('./modules/moduleName');

---------- 18 ----------
NPM is both the command line interface app that we use to manage the packages and also the repository itself.
https://www.npmjs.com/ is where all of the NPM packages are hosted.
NPM is a software that we use to manage the third party open-source packages that we choose to include and use in our project.
NPM interface comes with Node.js.

npm init
Creates a package.json file, which is a configuration file of our project where all kinds of data about the project is stored.

---------- 19 ----------
There are two types of packages that we can install. They are:
- simple (regular) dependencies
      They will be included into our own code. Our code depends on them to work correctly.
      We can install them like this:
      npm install <packageName>

- development dependencies
      Tools for development. For example, code bundler like WebPack, a debugger tool or a testing library.
      Our code doesn't really depend on them, we simply use them to develop our applications.
      We can install them like this:
      npm install <packageName> --save-dev

Slugify package  is used to create better URLs. Nodemon is used to automatically restart the server whenever we change something in the files. So instead of doing this every time we change something:
   node index.js
   Ctrl + C
We can do this instead:
   nodemon index.js
And it'll automatically restart everything.

There are two types of installs of NPM packages.
- locally
      Are installed in the project folder and aren't going to work anywhere else.
- globally
      Available in any and every folder on your machine. A package should be installed globally when it provides an executable command that you can run from the command line interface.
      We can do it like this:
      npm install <packageName> --global